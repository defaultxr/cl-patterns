;;;; t/pmeta.lisp - tests for `pmeta' and related functionality.

(in-package #:cl-patterns/tests)

(in-suite cl-patterns-tests)

(test pmeta
  "Test pmeta"
  (with-fixture temporary-pdef-dictionary ()
    (pdef :foo (pbind :dur (pwhite 0.5 2.0 8)))
    (is (= 4
           (reduce #'+ (mapcar #'dur (next-upto-n (pmeta :pattern (pseq (list :foo) 1) :dur 4)))))
        "pmeta's :dur key doesn't work properly"))
  (with-fixture temporary-pdef-dictionary ()
    (pdef :inner (pbind :dur 1 :x (pseries) :pfindur 4))
    (is-true (every-event-equal (list (event :dur 1 :x 0) (event :dur 1 :x 1)
                                      (event :dur 1 :x 2) (event :dur 1 :x 3)
                                      (event :dur 1 :x 0) (event :dur 1 :x 1)
                                      (event :dur 1 :x 2) (event :dur 1 :x 3))
                                (next-n (pmeta :pattern :inner) 8))
             "pmeta with :pattern key yields incorrect results")
    (is-true (every-event-equal (list (event :dur 1 :x 0) (event :dur 1 :x 1)
                                      (event :dur 1 :x 2) (event :dur 1 :x 3)
                                      (event :dur 1 :x 0) (event :dur 1 :x 1)
                                      (event :dur 1 :x 2) (event :dur 1 :x 3))
                                (next-n (pmeta :pattern :inner) 8))
             "pmeta with :embed key yields incorrect results")
    (is-true (every-event-equal (list (event :dur 1 :x 0) (event :dur 1 :x 1)
                                      (event :dur 1 :x 0) (event :dur 1 :x 1))
                                (next-n (pmeta :pattern :inner :findur 2)
                                        4))
             "pmeta with :findur key yields incorrect results"))
  (with-fixture temporary-pdef-dictionary ()
    (pdef :inner (pbind :dur 1/2 :x (pseries) :pfindur 1))
    (is-true (every-event-equal (list (event :dur 1/2 :x 0) (event :dur 1/2 :x 1)
                                      (event :type :rest :dur 1) (event :dur 1/2 :x 0))
                                (next-n (pmeta :pattern :inner :sync (list 2 4))
                                        4))
             "pmeta with :sync key yields incorrect results")
    (is-true (every-event-equal (list (event :dur 1/2 :x 0) (event :dur 1/2 :x 0)
                                      (event :dur 1/2 :x 0) (event :dur 1/2 :x 0))
                                (next-n (pmeta :pattern :inner :sync (list 1/2 1/2))
                                        4))
             "pmeta with :sync key yields incorrect results")
    (is-true (every-event-equal (list (event :dur 1 :x 0) (event :dur 1 :x 1)
                                      (event :dur 1 :x 0) (event :dur 1 :x 1))
                                (next-n (pmeta :pattern :inner :stretch 2)
                                        4))
             "pmeta with :stretch key yields incorrect results")
    (is-true (every-event-equal (list (event :dur 3/2 :x 0) (event :dur 3/2 :x 1)
                                      (event :dur 3/2 :x 0) (event :dur 3/2 :x 1))
                                (next-n (pmeta :pattern :inner :ts 3)
                                        4))
             "pmeta with :ts key yields incorrect results")
    (is-true (every-event-equal (list (event :dur 1/2 :x 0) (event :dur 1/2 :x 0)
                                      (event :dur 1/2 :x 1) (event :dur 1/2 :x 1))
                                (next-n (pmeta :pattern :inner :r 2)
                                        4))
             "pmeta with :r key yields incorrect results")
    (pdef :inner2 (pbind :bar (p+ 1 (pk :bar)) :x (pseries 0 1 4)))
    (is-true (every-event-equal (list (event :bar 10 :x 0) (event :bar 10 :x 1)
                                      (event :bar 10 :x 2) (event :bar 10 :x 3))
                                (next-upto-n (pmeta :inject (event :bar 9)
                                                    :pattern (pn :inner2 1))))
             "pmeta's :inject key does not inject before :pattern when it appears first")
    ;; FIX:
    ;; (is-true (every-event-equal (list (event :dur 1/2 :x 0 :y :zzz) (event :dur 1/2 :x 1 :y :xxx)
    ;;                                   (event :dur 1/2 :x 0 :y :zzz) (event :dur 1/2 :x 1 :y :xxx))
    ;;                             (next-upto-n (pmeta :pattern (pn :inner 2)
    ;;                                                 :inject (pbind :y (pseq (list :zzz :xxx))))))
    ;;          "pmeta with :inject key yields incorrect results")
    ;; (is-true (every-event-equal (list (event :bar 10 :x 0) (event :bar 10 :x 1)
    ;;                                   (event :bar 10 :x 2) (event :bar 10 :x 3)
    ;;                                   (event :bar 10 :x 0) (event :bar 10 :x 1)
    ;;                                   (event :bar 10 :x 2) (event :bar 10 :x 3))
    ;;                             (next-upto-n (pmeta :step-inject (pbind :bar (pseries 9 1))
    ;;                                                 :pattern (pn :inner2 2))))
    ;;          "pmeta's :step-inject key does not step-inject before :pattern when it appears first")
    (is-true (every-event-equal (list (event :dur 1/2 :x 0 :y :zzz) (event :dur 1/2 :x 1 :y :zzz)
                                      (event :dur 1/2 :x 0 :y :xxx) (event :dur 1/2 :x 1 :y :xxx))
                                (next-n (pmeta :pattern :inner :sinject (pbind :y (pseq (list :zzz :xxx))))
                                        4))
             "pmeta with :sinject key yields incorrect results"))
  (with-fixture temporary-pdef-dictionary ()
    (pdef :inner (pbind :dur 1 :x (pseries) :pfindur 4))
    ;; FIX: this is wrong because it limits to 1 first and then to 2 so only the first note is played. it should instead limit just to 2.
    ;; (is-true (every-event-equal (list (event :dur 1 :x 0) (event :dur 1 :x 1) eop eop)
    ;;                             (next-n (pmeta :pattern :inner
    ;;                                            :dur (pseq (list 1) 1)
    ;;                                            :dur (pseq (list 2) 1))
    ;;                                     4))
    ;;          "pmeta yields incorrect results when testing for premature inner pattern duration limiting")
    )
  ;; FIX:
  ;; (with-fixture temporary-pdef-dictionary ()
  ;;   (pdef :inner (pbind :dur 99 :x (pseries)))
  ;;   (is-true (string= (concat "3" #\newline)
  ;;                     (with-output-to-string (*standard-output*)
  ;;                       (next (pmeta :pattern :inner
  ;;                                    :dur 3
  ;;                                    :dur (ptrace (pk :dur))))))
  ;;            "pk in pmeta does not take its value from previous keys in the pmeta"))
  )

