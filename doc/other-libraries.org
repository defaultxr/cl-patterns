#+TITLE: Other Libraries

This document is a list of other libraries, tools, projects, etc that either have similar goals, or that you may find useful in conjunction with cl-patterns.

* Common Lisp audio

** [[https://github.com/defaultxr/thundersnow][thundersnow]]
Lisp/CLIM-based digital audio workstation and live coding laboratory.

** [[https://github.com/byulparan/cl-collider][cl-collider]]
The primary backend that cl-patterns is developed against, a Lisp interface to the SuperCollider sound server.

** [[http://incudine.sourceforge.net/][Incudine]]
Another supported backend for cl-patterns. Written from the ground up and designed to be used with Lisp.

** [[https://github.com/ormf/cm][Common Music]]
The original Lisp music library. This repository is a fork of the last version before the project switched over to using Scheme exclusively.

** [[http://repmus.ircam.fr/openmusic/home][OpenMusic]]
An object-oriented visual programming environment for musical composition based on Common Lisp. It may also be used as an all-purpose visual interface to Lisp programming. At a more specialized level, a set of provided classes and libraries make it a very convenient environment for music composition.

** [[https://github.com/defaultxr/cl-wav-synth][cl-wav-synth]]
A wav file editor; "manipulate wav files; express noises as you think". This is a maintained and un-bit-rotted fork of [[https://cl-wav-synth.common-lisp.dev][Philippe Brochard's cl-wav-synth]].

** [[https://github.com/mdedwards/slippery-chicken][slippery chicken]]
Slippery chicken is a specialised algorithmic composition program written in the general programming language Common Lisp and its object-oriented extension, the Common Lisp Object System (CLOS). The project's main aim was, and to an extent still is, to facilitate a melding of electronic and instrumental sound worlds, not just at the sonic but at the structural level.

** [[https://github.com/zkat/cl-openal][cl-openal]]
Lisp bindings to the [[https://www.openal.org/][OpenAL]] audio API, a cross-platform 3D audio API appropriate for use with gaming applications and many other types of audio applications.

** [[https://github.com/Shirakumo/harmony][Harmony]]
A Common Lisp sound system. Most suited for use in a game system, but may feasibly also be used for more advanced things such as an audio processing tool.

* Common Lisp audio-related

Extensions and convenience functionality useful when working with the systems above.

** [[https://github.com/defaultxr/bdef][bdef]]
Buffer definition; audio buffer abstraction for Lisp sound synthesis systems. Abstracts away sound loading, file conversion, metadata handling, etc, to make working with buffers in systems like cl-collider and Incudine easier.

** [[https://github.com/defaultxr/cl-renoise][cl-renoise]]
Functionality to interface with [[https://www.renoise.com/][Renoise]] from Common Lisp.

** [[https://github.com/MegaLoler/Music][Music]]
A framework for musical expression in Lisp with a focus on music theory. (Unrelated to Common Music)

* Common Lisp graphics

** [[https://common-lisp.net/project/mcclim/][McCLIM]]
A native Lisp graphical user interface library. Uses Lisp idioms and ideas for the development of user interaction modes. May be useful for visualization of pattern or other musical data, and interaction with the Lisp process.

** [[https://github.com/borodust/trivial-gamekit][trivial-gamekit]]
A library for getting into gamedev with Common Lisp; a very simple interface to graphics, audio, and input. Acts as a stepping stone to (the not yet stabilized) cl-bodge.

** [[https://github.com/borodust/cl-bodge][cl-bodge]]
"Experimental bodacious game engine written in Common Lisp". A modular and extensible framework for developing games and game-like applications in Lisp.

** [[https://github.com/cbaggers/cepl][CEPL]]
"Code Evaluate Play Loop". A project that attempts to make programming graphics on the GPU feel native to Lisp.

** [[https://github.com/vydd/sketch][Sketch]]
Common Lisp environment for the creation of visual art, game prototyping, etc. Similar in operation to the [[https://processing.org/][Processing]] (Java) library.

* Common Lisp extensions

** [[https://github.com/ruricolist/serapeum][Serapeum]]
"Utilities beyond Alexandria"; a large collection of useful utility functionality whose goal is to fill in the gaps in Common Lisp.

** [[https://github.com/alex-gutev/generic-cl/][generic-cl]]
Provides generic function wrappers over various functions in the Common Lisp standard, such as equality predicates and sequence operations. The goal of this wrapper is to provide a standard interface to common operations, such as testing for the equality of two objects, which is extensible to user-defined types.

** [[http://series.sourceforge.net/][series]]
"A series is a data structure much like a sequence, with similar kinds of operations. The difference is that in many situations, operations on series may be composed functionally and yet execute iteratively, without the need to construct intermediate series values explicitly. In this manner, series provide both the clarity of a functional programming style and the efficiency of an iterative programming style."

** [[https://github.com/rongarret/ergolib][ergolib]]
"A library designed to make programming in Common Lisp easier".

** [[https://github.com/vseloved/rutils][rutils]]
"Radical Utilities for Common Lisp". Extends Common Lisp with many additional functions and syntactic sugar.

* Non-CL

** [[https://supercollider.github.io/][SuperCollider]]
Audio engine, programming language and IDE. Includes the original patterns system that cl-patterns was based on, as well as scsynth, the primary backend cl-patterns is written for.

** [[https://tidalcycles.org/][TidalCycles]]
Pattern sequencing library written in Haskell. Also uses SuperCollider as a backend. It's the inspiration for the ~pcycles~ pattern included in cl-patterns.

** [[http://www.pawfal.org/fluxus/][Fluxus]]
Racket (Scheme-like) environment for the live coding of 3D graphics and games. Includes functionality for simple analysis of audio and functions to handle OSC messages.

** [[https://overtone.github.io/][Overtone]]
Audio live coding environment in Clojure using the SuperCollider server as a backend.

** [[https://github.com/defaultxr/tracker-mode][tracker-mode]]
Tracker-inspired Emacs mode for live codable sequencing.

** [[https://github.com/defaultxr/piano-mode][piano-mode]]
Emacs mode to play notes using your computer keyboard as if it were a "piano-style" keyboard, similar to functionality common in DAWs.

** [[http://xelf.me/scheme-mosaic.html][SchemeMosaic]]
A digital music mashup tool inspired by Steven Hazel's soundmosaic. The main technique employed is concatenative synthesis. Written in S7 Scheme as an extension to the Snd editor, and is released under the GPL Version 3.

** [[https://github.com/ideoforms/isobar][isobar]]
A Python library for creating and manipulating musical patterns, designed for use in algorithmic composition, generative music and sonification. It makes it quick and easy to express complex musical ideas, and can send and receive events from various different sources including MIDI, MIDI files, and OSC.

** [[https://opusmodus.com][Opusmodus]]
A comprehensive computer-aided environment for the whole work of music composition; a virtual space where a composer can develop ideas and experiments for projects large and small.
